

begin_problem(Bio).
list_of_descriptions. 
	name({*Bio-Examp-SPASS*}). 
	author({*Script by JD*}). 
	status(unknown).
	description({* show Virus <= Lebewesen is a consequence of ontology *}).
end_of_list.

list_of_symbols. 
	predicates[(pflanze,0), (PFLANZE,1), 
		(tier,0) , (TIER,1), (pilz,0), (PILZ,1), 
		(lebewesen,0) , (LEBEWESEN,1), (karnivor,0), (KARNIVOR,1), 
		(herbivor,0) , (HERBIVOR,1), (omnivor,0), (OMNIVOR,1), 
		(parasit,0) , (PARASIT,1), (virus,0), (VIRUS,1), 
		(befaellt,0), (BEFAELLT,2), 
		(frisst,0), (FRISST,2), 
		(toetet,0) , (TOETET,2)]. 


	translpairs[(pflanze, PFLANZE), (tier, TIER), 
		(pilz, PILZ), (lebewesen, LEBEWESEN), (karnivor, KARNIVOR), 
		(herbivor, HERBIVOR), (omnivor, OMNIVOR), (parasit, PARASIT), 
		(virus, VIRUS), (befaellt, BEFAELLT), (frisst, FRISST), 
		(toetet, TOETET)]. 
end_of_list.

list_of_special_formulae(axioms, DL).

	% Axiom-Part
	concept_formula( implies(pflanze, lebewesen),A1).
	concept_formula( implies(tier, lebewesen),A2).
	concept_formula( implies(pilz, lebewesen),A3).
	concept_formula( equiv(karnivor, and(tier, some(toetet, tier))),A4).
	concept_formula( equiv(herbivor, and(tier, some(frisst, pflanze))),A5).
	concept_formula( equiv(omnivor, and(some(frisst, pflanze), some(frisst, tier))),A6).
	role_formula(implies(comp(befaellt,frisst),toetet),A7).
	concept_formula( equiv(parasit, and(tier, some(befaellt, lebewesen))),A8).
	concept_formula( implies(virus, parasit),A9).
	concept_formula( implies(parasit, tier),A10).

end_of_list.

list_of_special_formulae(conjectures,DL). 
	% Problem 
	concept_formula( implies(virus, lebewesen), C). 
end_of_list.

list_of_settings(SPASS). 
{*set_flag(DocProof,1).*} 
end_of_list.

end_problem.